archivesBaseName = "polymer-autohost"
version = rootProject.mod_version + "+" + rootProject.minecraft_version


sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
    runs {
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "(AutoHost) Test Mod Server"
            source sourceSets.testmod
        }
    }
}

dependencies {
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    //modCompileOnly "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    //modCompileOnly "me.lucko:fabric-permissions-api:0.1-SNAPSHOT"

    api (project(path: ':polymer-common', configuration: 'namedElements'))
    api (project(path: ':polymer-resource-pack', configuration: 'namedElements'))


    testmodImplementation sourceSets.main.output
    testmodImplementation (project(path: ':polymer-core', configuration: 'namedElements'))
    testmodImplementation (project(path: ':polymer-blocks', configuration: 'namedElements'))
    testmodImplementation (project(path: ':polymer-reg-sync-manipulator', configuration: 'namedElements'))
    testmodImplementation (project(path: ':polymer-networking', configuration: 'namedElements'))

    compileOnly (project(path: ':polymer-virtual-entity', configuration: 'namedElements'))
    localRuntime (project(path: ':polymer-virtual-entity', configuration: 'namedElements'))
    modLocalRuntime("xyz.nucleoid:server-translations-api:2.4.0+1.21.2-rc1")
    api include('io.netty:netty-codec-http:4.1.82.Final')

    project(":polymer-core").afterEvaluate {
        testmodImplementation project(":polymer-core").sourceSets.testmod.output
    }
    project(":polymer-blocks").afterEvaluate {
        testmodImplementation project(":polymer-blocks").sourceSets.testmod.output
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
